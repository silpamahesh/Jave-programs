
import java.util.*;

public class BFS {
    public static void main(String[] args) {
        Graph graph = new Graph(6);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);

        System.out.println("BFS Traversal:");
        graph.bfs(0);
    }
}

class Graph {
    private int numVertices;
    private List<Integer>[] adjLists;

    public Graph(int numVertices) {
        this.numVertices = numVertices;
        adjLists = new List[numVertices];

        for (int i = 0; i < numVertices; i++) {
            adjLists[i] = new ArrayList<>();
        }
    }

    public void addEdge(int src, int dest) {
        adjLists[src].add(dest);
    }

    public void bfs(int startVertex) {
        boolean[] visited = new boolean[numVertices];
        Queue<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            int vertex = queue.poll();
            System.out.print(vertex + " ");

            for (int neighbor : adjLists[vertex]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
    }
}
